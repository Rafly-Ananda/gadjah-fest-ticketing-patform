// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Ticket {
  id  String @id @default(uuid())
  name String
  type String
  quantity Int 
  description String
  price Int
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  purchasedTicket PurchasedTicket[]
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String
  mobileNumber String
  booking Booking[]
}

model PurchasedTicket {
  id String @id @default(uuid())
  ticket Ticket @relation(fields: [masterTicketId], references: [id])
  masterTicketId String
  ticketStatus TicketStatus
  booking Booking @relation(fields: [bookingId], references: [id])
  bookingId String

  scannedTime DateTime?
  s3BarcodeKeyUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([masterTicketId])
  @@index([bookingId])

}

model MarathonDetail {
  id String @id @default(uuid())
  contactFirstName String
  contactLastName String
  contactEmail String
  contactMobileNumber String
  userGender String
  userMarathonSkill String
  additionalInformation String

  booking Booking[]
 
}

model Booking {
  id String @id @default(uuid())
  payment Payment?
  bookingStatus BookingStatus @default(PENDING)
  generatedBookingCode String
  user User @relation(fields: [userId], references: [id])
  userId String
  invoicePdfUrl String?
  marathonDetail MarathonDetail @relation(fields: [marathonDetailId], references: [id])
  marathonDetailId String @default("")
  paidMethod PaidMethod @default(XENDIT)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  bookingDetails BookingDetails[]
  purchasedTickets PurchasedTicket[]

  @@index([userId])
  @@index([marathonDetailId])
}

model BookingDetails {
  id String @id @default(uuid())
  booking Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  masterTicketId String
  itemStatus PendingTicketStatus
  quantity Int
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([bookingId])
}

model Payment {
  id String @id @default(uuid())
  amount Int
  booking Booking @relation(fields: [bookingId], references: [id])
  bookingId String @unique
  status PaymentStatus @default(PENDING)
  xenditInvoiceId String
  xenditInvoiceUrl String
  paymentTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([bookingId])
}

enum PendingTicketStatus {
  PENDING
  PAID
  REVOKED 
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  EXPIRED
}

enum BookingStatus {
  PENDING
  PAID
  EXPIRED
}

enum TicketStatus {
  VALID
  INVALID
}

enum PaidMethod {
  SELF
  XENDIT
}